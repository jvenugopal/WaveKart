/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/

package com.wavemaker.sampleapps.wavekart.eshopping.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.wavemaker.sampleapps.wavekart.eshopping.*;
import com.wavemaker.sampleapps.wavekart.eshopping.Orderdetail;

/**
 * Service object for domain model class Orderdetail.
 * @see Orderdetail
 */

public interface OrderdetailService {
   /**
	 * Creates a new orderdetail.
	 * 
	 * @param created
	 *            The information of the created orderdetail.
	 * @return The created orderdetail.
	 */
	public Orderdetail create(Orderdetail created);

	/**
	 * Deletes a orderdetail.
	 * 
	 * @param orderdetailId
	 *            The id of the deleted orderdetail.
	 * @return The deleted orderdetail.
	 * @throws EntityNotFoundException
	 *             if no orderdetail is found with the given id.
	 */
	public Orderdetail delete(Integer orderdetailId) throws EntityNotFoundException;

	/**
	 * Finds all orderdetails.
	 * 
	 * @return A list of orderdetails.
	 */
	public Page<Orderdetail> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<Orderdetail> findAll(Pageable pageable);
	
	/**
	 * Finds orderdetail by id.
	 * 
	 * @param id
	 *            The id of the wanted orderdetail.
	 * @return The found orderdetail. If no orderdetail is found, this method returns
	 *         null.
	 */
	public Orderdetail findById(Integer id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a orderdetail.
	 * 
	 * @param updated
	 *            The information of the updated orderdetail.
	 * @return The updated orderdetail.
	 * @throws EntityNotFoundException
	 *             if no orderdetail is found with given id.
	 */
	public Orderdetail update(Orderdetail updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the orderdetails in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the orderdetail.
	 */

	public long countAll();


    public Page<Orderdetail> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

