/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/

package com.wavemaker.sampleapps.wavekart.eshopping.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.wavemaker.sampleapps.wavekart.eshopping.*;
import com.wavemaker.sampleapps.wavekart.eshopping.Product;

/**
 * Service object for domain model class Product.
 * @see Product
 */

public interface ProductService {
   /**
	 * Creates a new product.
	 * 
	 * @param created
	 *            The information of the created product.
	 * @return The created product.
	 */
	public Product create(Product created);

	/**
	 * Deletes a product.
	 * 
	 * @param productId
	 *            The id of the deleted product.
	 * @return The deleted product.
	 * @throws EntityNotFoundException
	 *             if no product is found with the given id.
	 */
	public Product delete(Integer productId) throws EntityNotFoundException;

	/**
	 * Finds all products.
	 * 
	 * @return A list of products.
	 */
	public Page<Product> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<Product> findAll(Pageable pageable);
	
	/**
	 * Finds product by id.
	 * 
	 * @param id
	 *            The id of the wanted product.
	 * @return The found product. If no product is found, this method returns
	 *         null.
	 */
	public Product findById(Integer id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a product.
	 * 
	 * @param updated
	 *            The information of the updated product.
	 * @return The updated product.
	 * @throws EntityNotFoundException
	 *             if no product is found with given id.
	 */
	public Product update(Product updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the products in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the product.
	 */

	public long countAll();


    public Page<Product> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

