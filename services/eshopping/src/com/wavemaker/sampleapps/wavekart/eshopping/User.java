/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/

package com.wavemaker.sampleapps.wavekart.eshopping;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.Table;


import javax.persistence.CascadeType;


/**
 * User generated by hbm2java
 */
@Entity
@Table(name="`USER`"
    ,schema="PUBLIC"
)

public class User  implements java.io.Serializable {

    private Integer id;
    private String landmark;
    private String phone;
    private String pin;
    private String email;
    private String street;
    private String name;
    private String productBought;
    private String password;
    private String country;
    private String city;
    private String role;
    private Set<Itemorder> itemorders = new HashSet<Itemorder>(0);
    private Set<Productorder> productorders = new HashSet<Productorder>(0);

    public User() {
    }


    @Id @GeneratedValue(strategy=IDENTITY)
    

    @Column(name="`ID`", nullable=false)
    public Integer getId() {
        return this.id;
    }
    
    public void setId(Integer id) {
        this.id = id;
    }

    

    @Column(name="`LANDMARK`", nullable=false)
    public String getLandmark() {
        return this.landmark;
    }
    
    public void setLandmark(String landmark) {
        this.landmark = landmark;
    }

    

    @Column(name="`PHONE`", nullable=false, length=15)
    public String getPhone() {
        return this.phone;
    }
    
    public void setPhone(String phone) {
        this.phone = phone;
    }

    

    @Column(name="`PIN`", nullable=false)
    public String getPin() {
        return this.pin;
    }
    
    public void setPin(String pin) {
        this.pin = pin;
    }

    

    @Column(name="`EMAIL`", nullable=false)
    public String getEmail() {
        return this.email;
    }
    
    public void setEmail(String email) {
        this.email = email;
    }

    

    @Column(name="`STREET`", nullable=false)
    public String getStreet() {
        return this.street;
    }
    
    public void setStreet(String street) {
        this.street = street;
    }

    

    @Column(name="`NAME`", nullable=false)
    public String getName() {
        return this.name;
    }
    
    public void setName(String name) {
        this.name = name;
    }

    

    @Column(name="`PRODUCT_BOUGHT`")
    public String getProductBought() {
        return this.productBought;
    }
    
    public void setProductBought(String productBought) {
        this.productBought = productBought;
    }

    

    @Column(name="`PASSWORD`", nullable=false)
    public String getPassword() {
        return this.password;
    }
    
    public void setPassword(String password) {
        this.password = password;
    }

    

    @Column(name="`COUNTRY`", nullable=false)
    public String getCountry() {
        return this.country;
    }
    
    public void setCountry(String country) {
        this.country = country;
    }

    

    @Column(name="`CITY`", nullable=false)
    public String getCity() {
        return this.city;
    }
    
    public void setCity(String city) {
        this.city = city;
    }

    

    @Column(name="`ROLE`", nullable=false)
    public String getRole() {
        return this.role;
    }
    
    public void setRole(String role) {
        this.role = role;
    }

    @OneToMany(fetch=FetchType.LAZY, cascade = {CascadeType.ALL}, mappedBy="user")
    public Set<Itemorder> getItemorders() {
        return this.itemorders;
    }
    
    public void setItemorders(Set<Itemorder> itemorders) {
        this.itemorders = itemorders;
    }

    @OneToMany(fetch=FetchType.LAZY, cascade = {CascadeType.ALL}, mappedBy="user")
    public Set<Productorder> getProductorders() {
        return this.productorders;
    }
    
    public void setProductorders(Set<Productorder> productorders) {
        this.productorders = productorders;
    }





    public boolean equals(Object o) {
         if (this == o) return true;
		 if ( (o == null )) return false;
		 if ( !(o instanceof User) )
		    return false;

		 User that = (User) o;

		 return ( (this.getId()==that.getId()) || ( this.getId()!=null && that.getId()!=null && this.getId().equals(that.getId()) ) );
    }

    public int hashCode() {
         int result = 17;

         result = 37 * result + ( getId() == null ? 0 : this.getId().hashCode() );

         return result;
    }


}

